{"version":3,"sources":["utils/constants.js","Months.js","Users.js","utils/fetchUsers.js","App.js","serviceWorker.js","index.js"],"names":["MONTHS","number","name","Months","users","monthQty","onHoverMonth","useState","activeMonth","setActiveMonth","UserByName","a","b","fullName","handleHover","e","target","dataset","month","qty","color","newUsers","filter","it","sort","handleLeave","undefined","className","map","getColorMonth","href","key","data-number","data-month","data-qty","data-color","style","onMouseEnter","onMouseLeave","Users","userList","length","id","dob","fetchUsers","fetch","response","ok","Error","status","json","App","isLoading","setIsLoading","failure","setFailure","setUsers","monthUsers","setMonthUsers","setMonthQty","useEffect","then","data","firstName","lastName","Date","getMonth","toLocaleDateString","reduce","acc","cur","catch","error","console","log","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46689137.chunk.js","sourcesContent":["export const MONTHS = [\r\n  {\r\n    number: 1,\r\n    name: \"January\",\r\n  },\r\n  {\r\n    number: 2,\r\n    name: \"February\",\r\n  },\r\n  {\r\n    number: 3,\r\n    name: \"March\",\r\n  },\r\n  {\r\n    number: 4,\r\n    name: \"April\",\r\n  },\r\n  {\r\n    number: 5,\r\n    name: \"May\",\r\n  },\r\n  {\r\n    number: 6,\r\n    name: \"June\",\r\n  },\r\n  {\r\n    number: 7,\r\n    name: \"July\",\r\n  },\r\n  {\r\n    number: 8,\r\n    name: \"August\",\r\n  },\r\n  {\r\n    number: 9,\r\n    name: \"September\",\r\n  },\r\n  {\r\n    number: 10,\r\n    name: \"October\",\r\n  },\r\n  {\r\n    number: 11,\r\n    name: \"November\",\r\n  },\r\n  {\r\n    number: 12,\r\n    name: \"December\",\r\n  },\r\n];\r\n\r\nexport const USER_URL='https://yalantis-react-school-api.yalantis.com/api/task0/users';\r\n","import React, { useState } from \"react\";\r\nimport { MONTHS } from \"./utils/constants\";\r\n\r\nconst Months = ({ users, monthQty, onHoverMonth }) => {\r\n  const [activeMonth, setActiveMonth] = useState(0);\r\n  const UserByName = (a, b) => {\r\n    if (a.fullName > b.fullName) {\r\n      return 1;\r\n    }\r\n    if (a.fullName < b.fullName) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const handleHover = (e) => {\r\n    const { number, month, qty, color } = e.target.dataset;\r\n    const newUsers = users\r\n      .filter((it) => it.month === +number)\r\n      .sort(UserByName);\r\n    setActiveMonth(number);\r\n    onHoverMonth({ month, qty, color, users: newUsers });\r\n  };\r\n\r\n  const handleLeave = (e) => {\r\n    setActiveMonth(0);\r\n    onHoverMonth({\r\n      month: undefined,\r\n      users: [],\r\n      color: undefined,\r\n      qty: 0,\r\n    });\r\n  };\r\n\r\n  const getColorMonth = (qty) => {\r\n    let color;\r\n    if (qty <= 2) {\r\n      color = \"grey\";\r\n    } else if (qty >= 3 && qty <= 6) {\r\n      color = \"blue\";\r\n    } else if (qty >= 7 && qty <= 10) {\r\n      color = \"green\";\r\n    } else {\r\n      color = \"red\";\r\n    }\r\n    return color;\r\n  };\r\n\r\n  const renderMonths = () => {\r\n    return MONTHS.map((it) => {\r\n      const qty = monthQty[it.number] ?? 0;\r\n      const color = getColorMonth(qty);\r\n      const className =\r\n        \"month-ref\" + (it.number === +activeMonth ? \" active-month\" : \"\");\r\n      return (\r\n        <a\r\n          href=\"/#\"\r\n          key={it.number}\r\n          data-number={it.number}\r\n          data-month={it.name}\r\n          data-qty={qty}\r\n          data-color={color}\r\n          style={{ color }}\r\n          onMouseEnter={handleHover}\r\n          onMouseLeave={handleLeave}\r\n          className={className}\r\n        >\r\n          <span className=\"month-name\">{it.name}</span> ({qty})\r\n        </a>\r\n      );\r\n    });\r\n  };\r\n\r\n  return <nav className=\"months-wrapper\">{renderMonths()}</nav>;\r\n};\r\n\r\nexport default Months;\r\n","import React from \"react\";\r\n\r\nconst Users = ({ users, month, qty, color }) => {\r\n  const userList =\r\n    users.length === 0 ? (\r\n      <p>No users</p>\r\n    ) : (\r\n      users.map((it) => (\r\n        <li key={it.id}>\r\n          <a href=\"/#\">\r\n            <span className=\"user-fullname\">{it.fullName} </span>\r\n            <span className=\"user-date\">({it.dob})</span>\r\n          </a>\r\n        </li>\r\n      ))\r\n    );\r\n\r\n  const renderUsers = () => {\r\n    if (!month) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div>\r\n        <h1>\r\n          <span className=\"users-qty\" style={{ color }}>\r\n            {qty}\r\n          </span>{\" \"}\r\n          Users of birthday in{\" \"}\r\n          <span className=\"users-month\" style={{ color }}>\r\n            {month}\r\n          </span>\r\n        </h1>\r\n        <ul className=\"users-month-list\">{userList}</ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return renderUsers();\r\n};\r\n\r\nexport default Users;\r\n","import { USER_URL } from \"./constants\";\r\n\r\nexport const fetchUsers = async () => {\r\n  const response = await fetch(USER_URL);\r\n  if (!response.ok) {\r\n    throw new Error(\"HTTP error, status = \" + response.status);\r\n  }\r\n  return await response.json();\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport Months from \"./Months\";\nimport Users from \"./Users\";\nimport { fetchUsers } from \"./utils/fetchUsers\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [failure, setFailure] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [monthUsers, setMonthUsers] = useState({\n    month: undefined,\n    qty: 0,\n    color: undefined,\n    users: [],\n  });\n  const [monthQty, setMonthQty] = useState({});\n\n  const onHoverMonth = (newUsers) => {\n    setMonthUsers(newUsers);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetchUsers()\n      .then((data) => {\n        const newUsers = data.map((it) => {\n          return {\n            id: it.id,\n            fullName: `${it.firstName} ${it.lastName}`,\n            month: new Date(it.dob).getMonth() + 1,\n            dob: new Date(it.dob).toLocaleDateString(\"en-US\"),\n          };\n        });\n        const monthQty = newUsers.reduce((acc, cur) => {\n          const qty = acc[cur.month] ? acc[cur.month] : 0;\n          return { ...acc, [cur.month]: qty + 1 };\n        }, {});\n        setUsers(newUsers);\n        setMonthQty(monthQty);\n      })\n      .catch((error) => {\n        console.log(error);\n        setFailure(error.message);\n      });\n\n    setIsLoading(false);\n  }, []);\n\n  if (isLoading) {\n    return \"Loading ...\";\n  }\n\n  if (failure) {\n    return <p>Error occurs: {failure} </p>;\n  }\n\n  return (\n    <div className=\"content-wrapper\">\n      <Months\n        users={users}\n        monthQty={monthQty}\n        className=\"month-menu\"\n        onHoverMonth={onHoverMonth}\n      />\n      <Users {...monthUsers} className=\"user-list\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}